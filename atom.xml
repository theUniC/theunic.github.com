<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Christian Soronellas]]></title>
  <link href="http://theUniC.github.io/atom.xml" rel="self"/>
  <link href="http://theUniC.github.io/"/>
  <updated>2015-01-01T18:17:17+01:00</updated>
  <id>http://theUniC.github.io/</id>
  <author>
    <name><![CDATA[Christian Soronellas]]></name>
    <email><![CDATA[theunic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Development Environments With Vagrant and Docker]]></title>
    <link href="http://theUniC.github.io/2014/12/29/development-environments-with-vagrant-and-docker.html"/>
    <updated>2014-12-29T22:57:00+01:00</updated>
    <id>http://theUniC.github.io/2014/12/29/development-environments-with-vagrant-and-docker</id>
    <content type="html"><![CDATA[<h2>Facing the problem.</h2>

<h3>Repeatable and maintainable development environments</h3>

<p>One challenge we have to face when building an application is that the development environment should be an exact copy
of the production environment. This can be easy if we only have to deal with only a single application. Or we are the
only developer building the web application.</p>

<p>In that case, the easiest way to prepare the development environment is to install all the needed packages and
dependencies into the local machine.</p>

<p>Otherwise if we are in a team or we are required to deal with several applications, using the local machine as
development environment is simply not feasible, just because the different applications have different runtime
dependencies or having every developer of the team build and prepare his own development environment is error prone and
could lead to inconsistencies between every developer environment.</p>

<p>For this reason and in order to build development environments repeatable and maintainable across applications and team
members, <strong><a href="http://vagrantup.com">Vagrant</a></strong> takes the stage and allow the configuration of virtual machines as development
environments easily with a custom DSL built on top of Ruby.</p>

<h3>Disclaimer</h3>

<p>This article is not about how to get started with Vagrant. It assumes a basic knowledge of how Vagrant works. If you
don&rsquo;t have ever get in touch with Vagrant, I suggest to read the <em><a href="https://docs.vagrantup.com/v2/getting-started/index.html">Getting Started Vagrant guide</a></em>
before continue reading the rest of the entry.</p>

<h2>Using vagrant</h2>

<p>The solution to the problem could have been to use Vagrant to handle the creation of development environments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;puphpet/debian75-x64&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span>
</span><span class='line'>    <span class="s2">&quot;echo &#39;Hi world!&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this could be the minimum <code>Vagrantfile</code> that a project could have. Generally applications that build its
development environment using Vagrant have slightly more complex provisioning setups that could use <em><a href="http://www.ansible.com/">Ansible</a></em>,
<em><a href="http://puppetlabs.com/">Puppet</a></em>, <em><a href="https://www.chef.io/">Chef</a></em> or some other <em>IT automation system</em>. Currently,
Vagrant supports all of the mentioned and <a href="https://docs.vagrantup.com/v2/provisioning/index.html">many many more</a>.</p>

<h2>Tradeoffs, tradeoffs, tradeoffs &hellip;</h2>

<p>This is a good approach to maintain the creation of development environments. So every time we need to bootstrap any
development environment it&rsquo;s as easy as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>And vagrant brings a virtual machine with all of the application&rsquo;s runtime set up properly to start (or continue)
working in the project. And yes, you&rsquo;ve read it well. Every time we need a new development environment, vagrant creates
one or more new virtual machines if not have been yet created.</p>

<p>So if we have a slightly more complex architecture in production, it means probably that we will need several virtual
machines to be able to handle this. For example, a typical web scenario could be to have some sort of CDN (<em>Akamai</em>,
<em>Amazon CloudFront</em>, etc.) to handle all the static content of the site. If it doesn&rsquo;t have the static asset, it asks
for it to our web infrastructure. Generally, this infrastructure consists of an nginx or cluster of nginx that <em>talks</em>
with the CDN.</p>

<p>This is just an example, but I would not catalog it as <em>complex</em>. It&rsquo;s a common example of a web scenario. Another example,
could be if we have some sort of intermediate caching layer. I think of a Varnish for example. Or if we have some
operations in the business logic that performs something in memory with some <em>Redis</em> instance.</p>

<p>How do we face the creation of all those services? We could create a virtual machine for every service for example. Having a
dedicated virtual machine for every single service just to mimic our production infrastructure, would be the ideal case but I
think it&rsquo;s not possible. Just because, unless we have <em>truly monsters</em> as local host machines, the resources of them are
limited.</p>

<p>So one possible solution to this problem, is to build a single vagrant machine to provide all the services that the
application needs. Although this is a perfectly fine solution to the problem, we can come with another lightweight
solution by using <strong>Docker</strong>.</p>

<h2>Introducing docker</h2>

<p>Unless you live secluded in a dark cave, you probably have heard about <em><a href="https://www.docker.com">Docker</a></em>. In short,
Docker is a client/server application that is capable to run <em>processes in an isolated way, by running each one in an
isolated container</em>. That is, Docker is just another virtualization platform that make use of <em><a href="https://linuxcontainers.org/">LXC</a></em>
to provide virtualization at process level rather than in entire machine level.</p>

<p>It&rsquo;s out of the scope of the entry to provide a <em><a href="https://docs.docker.com/userguide/">Getting started with Docker</a></em>. In
fact, It assumes that the reader has a <strong>basic</strong> knowledge of how Docker works. So if you don&rsquo;t have tried Docker,
I suggest you to stop here and <strong><a href="https://www.docker.com/tryit/">take</a></strong> the tutorial that Docker&rsquo;s website provides.</p>

<h3>Docker limitations</h3>

<p><em>(NOTE: If you are not using OS X you can skip ahead this section and go directly to <a href="#docker-to-the-rescue">Docker to the rescue</a>)</em></p>

<p>The primarily limitation I&rsquo;ve found when using Docker for building development environments, is that OS X (I&rsquo;m currently
using a Mac Book Pro) does not have native support for <em>LXC</em>. <strong>So Docker cannot run natively in OS X</strong>.</p>

<p>But this is not a major real problem, because the Docker guys have already thought of this and the docker client can
be configured to run the Docker commands to the Docker server we want. They have created a project called
<strong><a href="http://boot2docker.io/">boot2docker</a></strong>. <code>boot2docker</code> is a command-line utility that spawns a lightweight
virtual machine through VirtualBox, that supports natively <em>LXC</em> and can run Docker commands.</p>

<p>But, although <em>boot2docker</em> is an excellent project that allow us to spawn Docker containers in hosts which don&rsquo;t support
<em>LXC</em>, it has from my point of view a major limitation that makes it unable to be used in the development of large applications:
<strong>It only supports file sharing through VirtualBox Shared Folders</strong>. That is, it does not have support for <strong>NFS</strong> and VirtualBox
SharedFolder are <strong><a href="http://mitchellh.com/comparing-filesystem-performance-in-virtual-machines">terrible slow with a large number of files</a></strong>.</p>

<p>So if you have an application with a large number of dynamic includes (that is applications written in an interpreted
language: PHP, Ruby, Python, etc.) I don&rsquo;t recommend the usage of the virtual machine that provides <code>boot2docker</code>.
Maybe in the future they will address this major problem. We, all of the web developers that work with large
applications, hope so :)</p>

<p>Fortunately, the usage of the virtual machine spawned by <code>boot2docker</code> <strong>is not mandatory</strong>. We can use another
custom virtual machine that could operate directly with <code>boot2docker</code>.</p>

<h2><a name="docker-to-the-rescue"></a> Docker to the rescue</h2>

<p>With Docker the schema changes a bit. Instead of having a virtual machine with all the services running inside or
having several virtual machines one per service to allow them to run in an isolated way, we can bootstrap a single
virtual machine and have all the processes that the application need to run, in an isolated way.</p>

<h3>Setting up a VM to operate with Docker (OS X)</h3>

<p>Again <strong>this only applies if you&rsquo;re under OS X</strong>. If you are under some distribution with native support for LXC you will
probably don&rsquo;t have to worry about all of this.</p>

<p><em>We can use Vagrant to spawn a virtual machine that acts as if it was provided by boot2docker, but without all the
limitations of boot2docker.</em> That means, we can spawn a new virtual machine with <strong>NFS support</strong> that will be able to
create Docker containers. In fact, someone has already created a Vagrant box for that:
<a href="https://vagrantcloud.com/yungsang/boxes/boot2docker">https://vagrantcloud.com/yungsang/boxes/boot2docker</a>. This is an
improved version of <code>boot2docker</code> with some extra benfits but the primary, at least for me, is the support for
NFS shared folders.</p>

<p>To make the point clear <strong>this does not mean that docker volumes and data-only volume containers are mounted through NFS</strong>,
this means that we can mount NFS shared folders on that machine and then <em>make use of that folders to build volumes and
data-only volume containers</em>. So we still have to manually mount the shared folders on the machine, but this drawback with
Vagrant is totally painless and can be assumed with almost no cost.</p>

<p>So we could have a Vagrantfile similar to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;yungsang/boot2docker&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Synced folders</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;path/to/a/folder&quot;</span><span class="p">,</span> <span class="s2">&quot;/mounted/folder&quot;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;nfs&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">virtualbox</span><span class="o">|</span>
</span><span class='line'>      <span class="n">virtualbox</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">2048</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very basic version of the Vagrantfile. With this we only have to bring up the VM and tell <code>boot2docker</code> that
it must operate with this instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>tcp://localhost:2375
</span></code></pre></td></tr></table></div></figure>


<p>And to check that everything works properly, the following commands should not fail</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker version
</span><span class='line'><span class="nv">$ </span>docker images
</span><span class='line'><span class="nv">$ </span>docker ps -a
</span></code></pre></td></tr></table></div></figure>


<p>With this you are ready to start working with Docker. You&rsquo;re able at this point to start building images and creating
isolated containers that could use the synced folders with an acceptable performance.</p>

<h2>Development environments with Vagrant + Docker</h2>

<p>To be fair and if you don&rsquo;t like Vagrant, there are other alternatives: the <strong><a href="http://www.fig.sh/">fig</a></strong> project. Again
if you&rsquo;re under OS X, you will probably have to spawn a VM to save the performance issues with <em>boot2docker</em>, so in the
end you&rsquo;ll have to use an intermediate custom VM either with Vagrant or not.</p>

<p>So now, you&rsquo;re truly ready to start building the development environment with <strong>Vagrant</strong> and <strong>Docker</strong>. First of all
we should prepare all the Docker files in order to build the Docker images. For the example we will use</p>

<ul>
<li>A data-only volume container that will contain all the source code.</li>
<li>A container that will run nginx.</li>
<li>A container that will run php-fpm.</li>
</ul>


<p>So a possible application layout could be one as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── src
</span><span class='line'>├── public
</span><span class='line'>│   └── index.php
</span><span class='line'>├── config
</span><span class='line'>│   └── environment
</span><span class='line'>│       └── docker
</span><span class='line'>│           ├── phpfpm
</span><span class='line'>│           │   ├── www.conf
</span><span class='line'>│           │   └── Dockerfile
</span><span class='line'>│           └── nginx
</span><span class='line'>│               ├── vhost.conf
</span><span class='line'>│               ├── start.sh
</span><span class='line'>│               └── Dockerfile
</span><span class='line'>└── Vagrantfile
</span></code></pre></td></tr></table></div></figure>


<p>Next we should restructure the Vagrantfile in order to make it more maintainable, and also share the application code as
a NFS mount to achieve an acceptable performance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;default&quot;</span><span class="p">,</span> <span class="ss">autostart</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">default</span><span class="o">|</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;yungsang/boot2docker&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># The application code</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;/var/www&quot;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;nfs&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">virtualbox</span><span class="o">|</span>
</span><span class='line'>            <span class="n">virtualbox</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">2048</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">build_image</span> <span class="s2">&quot;/var/www/config/environment/docker/nginx&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s1">&#39;-t &quot;nginx&quot;&#39;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">build_image</span> <span class="s2">&quot;/var/www/config/environment/docker/php-fpm&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s1">&#39;-t &quot;phpfpm&quot;&#39;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># The default machine already has support for SSH</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">insert_key</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;tcuser&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things to note here:</p>

<ul>
<li>With the instruction <code>default.vm.synced_folder ".", "/var/www", type: "nfs"</code> we have mounted through NFS the
application source code.</li>
<li>Then we specified a <code>docker</code> provisioner for the <code>default</code> machine that will build all the needed Docker
images (This has been done that way, because I was not able to make Vagrant to build the images automatically) with
the names: <code>nginx</code> and <code>phpfpm</code>.</li>
</ul>


<p>To end with the <code>Vagrantfile</code>, the only needed thing is to specify the Docker containers as if they were common
Vagrant VMs. First, <strong>in the same Vagrantfile where we defined the <code>default</code> machine</strong>, let&rsquo;s define the <code>app</code>
Docker container, a <em>data-only volume container</em> that will host the application source code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;app&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;debian&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;app&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">volumes</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;/var/www:/var/www&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">vagrant_vagrantfile</span> <span class="o">=</span> <span class="bp">__FILE__</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">remains_running</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the only purpose of this container is to host the application source code, we don&rsquo;t need a <code>Dockerfile</code> to
build an image for it. So we only need to configure the base image through <code>docker.image = "debian"</code>.
Next we give the name <code>app</code> to the image, add a data volume with <code>docker.volumes = ["/var/www:/var/www"]</code> and
tell Vagrant that this container won&rsquo;t be permanently running with <code>docker.remains_running = false</code>. Note that the
data-volumes, have a direct correspondence with the synced folders of the <code>default</code> machine.</p>

<p>Additionally, Vagrant needs to know which VM should spawn thorough <code>docker.vagrant_vagrantfile = __FILE__</code>. With
this we are telling Vagrant that this container will be running on the <code>default</code> machine in the <strong>current</strong>
Vagrantfile. If you&rsquo;re in the case that you don&rsquo;t need an intermediate VM to create Docker container you should add the
line <code>docker.force_host_vm = false</code>. Now we only need to define the container configuration for the <code>nginx</code> and
 <code>phpfpm</code> images</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;phpfpm&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">phpfpm</span><span class="o">|</span>
</span><span class='line'>        <span class="n">phpfpm</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;phpfpm&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;phpfpm&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">create_args</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--volumes-from=app&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">vagrant_vagrantfile</span> <span class="o">=</span> <span class="bp">__FILE__</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;nginx&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">nginx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">nginx</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">create_args</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--volumes-from=app&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">link</span> <span class="s2">&quot;phpfpm:phpfpm&quot;</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">vagrant_vagrantfile</span> <span class="o">=</span> <span class="bp">__FILE__</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">ports</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;80:80&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that with this two containers we are specifying the images <code>phpfpm</code> and <code>nginx</code>, that correspond to the
image names we used in the <code>default</code> machine into the <code>docker</code> provisioner. This is the full Vagrantfile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;default&quot;</span><span class="p">,</span> <span class="ss">autostart</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">default</span><span class="o">|</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;yungsang/boot2docker&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># The application code</span>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;/var/www&quot;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;nfs&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">virtualbox</span><span class="o">|</span>
</span><span class='line'>            <span class="n">virtualbox</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">2048</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">default</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">build_image</span> <span class="s2">&quot;/var/www/config/environment/docker/nginx&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s1">&#39;-t &quot;nginx&quot;&#39;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">build_image</span> <span class="s2">&quot;/var/www/config/environment/docker/php-fpm&quot;</span><span class="p">,</span> <span class="ss">args</span><span class="p">:</span> <span class="s1">&#39;-t &quot;phpfpm&quot;&#39;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;app&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;debian&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;app&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">volumes</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;/var/www:/var/www&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">vagrant_vagrantfile</span> <span class="o">=</span> <span class="bp">__FILE__</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">remains_running</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;phpfpm&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">phpfpm</span><span class="o">|</span>
</span><span class='line'>        <span class="n">phpfpm</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;phpfpm&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;phpfpm&quot;</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">create_args</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--volumes-from=app&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">vagrant_vagrantfile</span> <span class="o">=</span> <span class="bp">__FILE__</span>
</span><span class='line'>            <span class="n">docker</span><span class="o">.</span><span class="n">remains_running</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;nginx&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">nginx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">nginx</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">docker</span><span class="o">|</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">create_args</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--volumes-from=app&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">link</span> <span class="s2">&quot;phpfpm:phpfpm&quot;</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">vagrant_vagrantfile</span> <span class="o">=</span> <span class="bp">__FILE__</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">remains_running</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="n">docker</span><span class="o">.</span><span class="n">ports</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;80:80&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this we are ready to run the full development environment with Docker and through Vagrant. It&rsquo;s important that the
containers should be created in the order specified: first the <code>app</code> that will hold the application source code,
next the <code>phpfpm</code> container that will be used by the <code>nginx</code> container to provide the application entry point
through the port 80. To tell Vagrant that it should create the containers in that order, we should use the
 <code>--no-parallel</code> flag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up --no-parallel
</span></code></pre></td></tr></table></div></figure>


<h2>Summing up</h2>

<p>I think Docker is an awesome tool. It&rsquo;s pretty easy to build lightweight development environments either with Vagrant or
fig. In the worst case, we only need to spun up a tiny virtual machine before. Compared in the case where we have <em>n</em>
virtual machines one for each service or one for each application that agglutinates all the services that the application
needs. With Docker development environments will bootstrap a lot faster once they are created.</p>

<p>To conclude with the entry I have created a Github repo with an example application that runs its development
environment with Vagrant and Docker. Check it out at <a href="https://github.com/theUniC/vagrant-docker-example">https://github.com/theUniC/vagrant-docker-example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Shoud Not Be Using Annotations]]></title>
    <link href="http://theUniC.github.io/2013/07/25/why-you-should-not-be-using-annotations.html"/>
    <updated>2013-07-25T21:03:00+02:00</updated>
    <id>http://theUniC.github.io/2013/07/25/why-you-should-not-be-using-annotations</id>
    <content type="html"><![CDATA[<p>In fact. <strong>Annotations</strong> are evil. If you&rsquo;re using it, you&rsquo;re doing it wrong. But why? Why are they so evil? Next, I&rsquo;m going to present a real-world use-case in which the use of annotations
lead to a serious coupling situation.</p>

<h2>The use-case</h2>

<p>Supose you have an application in which you want to integarate an ORM with annotated support to define your domain objects, in order to keep under control the growing complex business logic. You
look at the resulting code, and &hellip; Wow! Have you ever seen such a clean code?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Acme\Shop\Entity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @ORM\Entity</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Product</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * @ORM\Id</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * @ORM\Column(type=&quot;string&quot;)</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$title</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * @ORM\Column(type=&quot;decimal&quot;)</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$price</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Coupling, coupling and more coupling</h2>

<p>This piece of code flaws of a serious coupling problem. <strong>YOU ARE ACTUALLY COUPLING YOUR DOMAIN OBJECT TO ITS OWN CONFIGURATION</strong>. A statement of <strong>domain-driven design</strong> that I
really like is that &ldquo;<em>Separating the domain layer from the infrastructure and user interface layers allows much cleaner design of each layer. Isolated layers are much less expensive
to mantain, because they tend to evolve at different rates and respond to different needs.</em>&rdquo;</p>

<p>But, how could it be? It&rsquo;s only a plain PHP class with no defined behaviour and a few comments, it can be changed whenever it&rsquo;s needed.</p>

<p>OK! Supose that there&rsquo;s a need to reuse this entity in another persistence engine. How could it be done with annotations? It cannot be done, because I cannot define the same annotation
twice without overriding the previous one!</p>

<p>The simplest example could be different table names between engines that share common entities. How could it be mapped without breaking each other? Or the use of sequences in Oracle/Postgres
&hellip; So, indeed, this entity is coupled with the persistence engine.</p>

<p>The solution would be to move all the persistence mapping (aka entity metadata) to another format like YAML, XML or PHP (no annotated code). Doing it this way several mapping formats
could be used and share common entities between each of them.</p>

<h2>And with couping comes the rest &hellip;</h2>

<p>In case we need to perform unit testing or to do some kind of runtime substitution, the entity is absolutely contextualized and the dependencies cannot be changed at runtime. It&rsquo;s actually
tied to an implementation. So there is no chance to substitute any of the dependencies.</p>

<h2>Conclusion</h2>

<p>At a first glance annotations could seem a big chance to keep your code simple and clean. But It actually leads to a coupling problem and serious design flaws. If you don&rsquo;t mind about that
coupling level, then probably annotations are for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New and Shiny Personal Blog!]]></title>
    <link href="http://theUniC.github.io/2013/07/23/my-new-and-shiny-personal-blog.html"/>
    <updated>2013-07-23T20:55:00+02:00</updated>
    <id>http://theUniC.github.io/2013/07/23/my-new-and-shiny-personal-blog</id>
    <content type="html"><![CDATA[<h2>Introducing Octopress</h2>

<p>Today I&rsquo;m reopening my personal blog. And it comes with a big change. I&rsquo;ve migrated from Wordpress to Octopress. Mainly for the content-orientation aspect of Octopress.
I&rsquo;m very tired to fight against the so cool web interface of Wordpress for managing posts and all the stuff. I think Wordpress it&rsquo;s a great product besides the internal
crappy code, but I like the simplicity of Octopress &amp; Jekyll.</p>

<h2>The pros</h2>

<p>Mainly the reasons for the change have been</p>

<ol>
<li>Octopress is dead simple. You don&rsquo;t need complicated and bloated web interfaces. Instead is a matter of write content. As simple as that.</li>
<li>It&rsquo;s fast than Wordpress. Remember Octopress is based on <a href="http://jekyllrb.com">Jekyll</a>, a static blog-aware web site generator, that dumps all your posts to plain HTML.</li>
<li>Levarages git. Git is used to keep track of all the changes in your content :)</li>
<li>Plays nice with Github. Jekyll is intended to be deployed to github pages, so to publish the blog had been matter of minutes.</li>
</ol>


<h2>The cons</h2>

<p>Must admit. Octopress / Jekyll isn&rsquo;t the silver bullet.</p>

<ol>
<li>It&rsquo;s hard to get started. I&rsquo;m a ruby newby! :(</li>
<li>Don&rsquo;t use Octopress if your main concern it&rsquo;s not only to write content.</li>
</ol>

]]></content>
  </entry>
  
</feed>
